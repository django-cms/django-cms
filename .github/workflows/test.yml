name: django CMS test.yml

on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  postgres:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13', '3.14']
        requirements-file: [
          django-4.2.txt,
          django-5.0.txt,
          django-5.1.txt,
          django-5.2.txt,
          django-6.0.txt,
        ]
        # On nightly runs, test all postgres versions. On push/PR, only test latest.
        postgres-version: ${{ github.event_name == 'schedule' && fromJSON('["16", "17", "18"]') || fromJSON('["18"]') }}
        os: [
          ubuntu-latest,
        ]
        exclude:
          # Python 3.14 only works with Django 5.2+
          - python-version: '3.14'
            requirements-file: django-4.2.txt
          - python-version: '3.14'
            requirements-file: django-5.0.txt
          - python-version: '3.14'
            requirements-file: django-5.1.txt
          # Python 3.10 and 3.11 only supported until Django 5.2
          - python-version: '3.10'
            requirements-file: django-6.0.txt
          - python-version: '3.11'
            requirements-file: django-6.0.txt

    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v5
    - name: Set up Python ${{ matrix.python-version }}

      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        sudo apt install gettext gcc -y
        python -m pip install --upgrade pip uv
        uv pip install --system pytest
        uv pip install --system -r test_requirements/${{ matrix.requirements-file }}
        uv pip install --system -r test_requirements/databases.txt
        uv pip install --system -e .

    - name: Test with django test runner (coverage enabled)
      run: |
        coverage run manage.py test
      env:
        DATABASE_URL: postgres://postgres:postgres@127.0.0.1/postgres

    - name: Upload coverage data
      uses: actions/upload-artifact@v5
      with:
        name: coverage-data-${{ github.job }}-${{ matrix.python-version }}-${{ matrix.requirements-file }}-postgres${{ matrix.postgres-version }}
        include-hidden-files: true
        path: '.coverage*'

  mysql:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13', '3.14']
        requirements-file: [
          django-4.2.txt,
          django-5.0.txt,
          django-5.1.txt,
          django-5.2.txt,
          django-6.0.txt,
        ]
        # On nightly runs, test all mysql versions. On push/PR, only test latest.
        mysql-version: ${{ github.event_name == 'schedule' && fromJSON('["8.4", "9.5"]') || fromJSON('["8.4"]') }}
        os: [
          ubuntu-latest,
        ]
        exclude:
          # Python 3.14 only works with Django 5.2+
          - python-version: '3.14'
            requirements-file: django-4.2.txt
          - python-version: '3.14'
            requirements-file: django-5.0.txt
          - python-version: '3.14'
            requirements-file: django-5.1.txt
          # Python 3.10 and 3.11 only supported until Django 5.2
          - python-version: '3.10'
            requirements-file: django-6.0.txt
          - python-version: '3.11'
            requirements-file: django-6.0.txt

    services:
      mysql:
        image: mysql:${{ matrix.mysql-version }}
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: djangocms_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3


    steps:
    - uses: actions/checkout@v5
    - name: Set up Python ${{ matrix.python-version }}

      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        sudo apt install gettext gcc -y
        python -m pip install --upgrade pip uv
        uv pip install --system pytest
        uv pip install --system -r test_requirements/${{ matrix.requirements-file }}
        uv pip install --system -r test_requirements/databases.txt
        uv pip install --system -e .

    - name: Test with django test runner (coverage enabled)
      run: |
        coverage run manage.py test
      env:
        DATABASE_URL: mysql://root@127.0.0.1/djangocms_test

    - name: Upload coverage data
      uses: actions/upload-artifact@v5
      with:
        name: coverage-data-${{ github.job }}-${{ matrix.python-version }}-${{ matrix.requirements-file }}-mysql${{ matrix.mysql-version }}
        include-hidden-files: true
        path: '.coverage*'

  sqlite:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13', '3.14']
        requirements-file: [
          django-4.2.txt,
          django-5.0.txt,
          django-5.1.txt,
          django-5.2.txt,
          django-6.0.txt,
        ]
        os: [
          ubuntu-latest,
        ]
        exclude:
          # Python 3.14 only works with Django 5.2+
          - python-version: '3.14'
            requirements-file: django-4.2.txt
          - python-version: '3.14'
            requirements-file: django-5.0.txt
          - python-version: '3.14'
            requirements-file: django-5.1.txt
          # Python 3.10 and 3.11 only supported until Django 5.2
          - python-version: '3.10'
            requirements-file: django-6.0.txt
          - python-version: '3.11'
            requirements-file: django-6.0.txt

    steps:
    - uses: actions/checkout@v5
    - name: Set up Python ${{ matrix.python-version }}

      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        sudo apt install gettext gcc -y
        python -m pip install --upgrade pip uv
        uv pip install --system pytest
        uv pip install --system -r test_requirements/${{ matrix.requirements-file }}
        uv pip install --system -r test_requirements/databases.txt
        uv pip install --system -e .

    - name: Test with django test runner (coverage enabled)
      run: coverage run manage.py test
      env:
        DATABASE_URL: sqlite://localhost/testdb.sqlite

    - name: Upload coverage data
      uses: actions/upload-artifact@v5
      with:
        name: coverage-data-${{ github.job }}-${{ matrix.python-version }}-${{ matrix.requirements-file }}
        include-hidden-files: true
        path: '.coverage*'

  django-main-sqlite:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12']
        requirements-file: ['requirement_base_django_main.txt']
        os: [
          ubuntu-latest,
        ]

    steps:
    - uses: actions/checkout@v5
    - name: Set up Python ${{ matrix.python-version }}

      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        sudo apt install gettext gcc -y
        python -m pip install --upgrade pip uv
        uv pip install --system pytest
        uv pip install --system -r test_requirements/${{ matrix.requirements-file }}
        uv pip install --system -e .

    - name: Test with django test runner (coverage enabled)
      run: coverage run manage.py test
      continue-on-error: true
      env:
        DATABASE_URL: sqlite://localhost/testdb.sqlite

    - name: Upload coverage data
      uses: actions/upload-artifact@v5
      with:
        name: coverage-data-${{ github.job }}-${{ matrix.python-version }}-${{ matrix.requirements-file }}
        include-hidden-files: true
        path: '.coverage*'

  django-main-postgres:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12', '3.13', '3.14']
        requirements-file: ['requirement_base_django_main.txt']
        # On nightly runs, test all postgres versions. On push/PR, only test latest.
        postgres-version: ${{ github.event_name == 'schedule' && fromJSON('["16", "17", "18"]') || fromJSON('["18"]') }}
        os: [
          ubuntu-latest,
        ]

    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v5
    - name: Set up Python ${{ matrix.python-version }}

      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        sudo apt install gettext gcc -y
        python -m pip install --upgrade pip uv
        uv pip install --system pytest
        uv pip install --system -r test_requirements/${{ matrix.requirements-file }}
        uv pip install --system -r test_requirements/databases.txt
        uv pip install --system -e .

    - name: Test with django test runner (coverage enabled)
      run: |
        python -c "from django import __version__ ; print(f'Django version {__version__}')"
        coverage run manage.py test
      continue-on-error: true
      env:
        DATABASE_URL: postgres://postgres:postgres@127.0.0.1/postgres

    - name: Upload coverage data
      uses: actions/upload-artifact@v5
      with:
        name: coverage-data-${{ github.job }}-${{ matrix.python-version }}-${{ matrix.requirements-file }}-postgres${{ matrix.postgres-version }}
        include-hidden-files: true
        path: '.coverage*'

  django-main-mysql:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12', '3.13', '3.14']
        requirements-file: ['requirement_base_django_main.txt']
        # On nightly runs, test all mysql versions. On push/PR, only test latest.
        mysql-version: ${{ github.event_name == 'schedule' && fromJSON('["8.4", "9.5"]') || fromJSON('["9.5"]') }}
        os: [
          ubuntu-latest,
        ]

    services:
      mysql:
        image: mysql:${{ matrix.mysql-version }}
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: djangocms_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3


    steps:
    - uses: actions/checkout@v5
    - name: Set up Python ${{ matrix.python-version }}

      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        sudo apt install gettext gcc -y
        python -m pip install --upgrade pip uv
        uv pip install --system pytest
        uv pip install --system -r test_requirements/${{ matrix.requirements-file }}
        uv pip install --system -r test_requirements/databases.txt
        uv pip install --system -e .

    - name: Test with django test runner (coverage enabled)
      run: |
        coverage run manage.py test
      continue-on-error: true
      env:
        DATABASE_URL: mysql://root@127.0.0.1/djangocms_test

    - name: Upload coverage data
      uses: actions/upload-artifact@v5
      with:
        name: coverage-data-${{ github.job }}-${{ matrix.python-version }}-${{ matrix.requirements-file }}-mysql${{ matrix.mysql-version }}
        include-hidden-files: true
        path: '.coverage*'

  coverage:
    name: Coverage
    runs-on: ${{ matrix.os }}
    needs: [
      postgres, mysql, sqlite,
      django-main-sqlite,
      django-main-postgres,
      django-main-mysql,
    ]
    strategy:
      matrix:
        python-version: ['3.13']
        os: [ ubuntu-latest, ]
    steps:
      - uses: actions/checkout@v5
        name: Set up Python ${{ matrix.python-version }}

      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: python -m pip install --upgrade coverage[toml]

      - name: Download data
        uses: actions/download-artifact@v6
        with:
          pattern: coverage-data-*
          merge-multiple: true

      - name: Combine coverage
        run: |
          python -m coverage combine
          python -m coverage html
          python -m coverage report

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5

      - name: Upload HTML report (for debugging)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v5
        with:
          name: html-report
          path: htmlcov
